name: Optimized CI/CD Pipeline with Security

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx2048m -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"

jobs:
  # Validation job for PRs
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Compile and validate
        run: |
          # Only compile changed services for PRs
          mvn ${{ env.MAVEN_CLI_OPTS }} compile -DskipTests -T 2C
        working-directory: .

#   # Security scanning job (runs on main branch)
#   security:
#     name: Security Checks
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0 # Full history for better security analysis

#       - name: Set up JDK ${{ env.JAVA_VERSION }}
#         uses: actions/setup-java@v4
#         with:
#           java-version: ${{ env.JAVA_VERSION }}
#           distribution: "temurin"
#           cache: maven

#       # Dependency vulnerability scanning
#       - name: OWASP Dependency Check
#         run: |
#           # Download OWASP Dependency Check
#           wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
#           unzip -q dependency-check-8.4.0-release.zip

#           # Run dependency check for each service
#           for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
#             if [ -d "services/$service" ]; then
#               echo "Scanning dependencies for $service..."
#               ./dependency-check/bin/dependency-check.sh \
#                 --project "stockfellow-$service" \
#                 --scan "services/$service" \
#                 --format "JSON" \
#                 --format "HTML" \
#                 --out "security-reports/$service" \
#                 --nvdApiKey ${{ secrets.NVD_API_KEY || 'demo-key' }} \
#                 --failOnCVSS 7 \
#                 --enableExperimental || echo "Dependency check failed for $service"
#             fi
#           done
#         continue-on-error: true

#       # Static Application Security Testing (SAST)
#       - name: CodeQL Analysis
#         uses: github/codeql-action/init@v3
#         with:
#           languages: java
#           queries: security-and-quality

#       - name: Build for CodeQL
#         run: |
#           # Build all services for CodeQL analysis
#           for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
#             if [ -d "services/$service" ]; then
#               echo "Building $service for security analysis..."
#               cd "services/$service"
#               mvn ${{ env.MAVEN_CLI_OPTS }} compile -DskipTests -q
#               cd ../..
#             fi
#           done

#       - name: Perform CodeQL Analysis
#         uses: github/codeql-action/analyze@v3

#       # Secret scanning
#       - name: Secret Detection with TruffleHog
#         run: |
#           # Install TruffleHog
#           curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

#           # Scan for secrets
#           trufflehog git file://. \
#             --only-verified \
#             --json \
#             --branch main > security-reports/secrets-scan.json || echo "Secrets found - review required"
#         continue-on-error: true

#       # Maven security plugins
#       - name: Maven Security Scan
#         run: |
#           mkdir -p security-reports

#           # Run security-focused Maven plugins for each service
#           for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
#             if [ -d "services/$service" ]; then
#               echo "Running Maven security checks for $service..."
#               cd "services/$service"
              
#               # Versions plugin to check for outdated dependencies
#               mvn ${{ env.MAVEN_CLI_OPTS }} versions:display-dependency-updates \
#                 -DoutputFile="../../security-reports/$service-dependency-updates.txt" \
#                 -q || true
              
#               # Security-focused SpotBugs rules
#               mvn ${{ env.MAVEN_CLI_OPTS }} spotbugs:check \
#                 -Dspotbugs.xmlOutput=true \
#                 -Dspotbugs.xmlOutputDirectory="../../security-reports/" \
#                 -Dspotbugs.outputFile="$service-spotbugs.xml" \
#                 -q || echo "SpotBugs issues found in $service"
              
#               cd ../..
#             fi
#           done

#       # License compliance check
#       - name: License Check
#         run: |
#           # Check for license compliance issues
#           for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
#             if [ -d "services/$service" ]; then
#               echo "Checking licenses for $service..."
#               cd "services/$service"
#               mvn ${{ env.MAVEN_CLI_OPTS }} license:add-third-party \
#                 -Dlicense.outputDirectory="../../security-reports" \
#                 -Dlicense.thirdPartyFilename="$service-licenses.txt" \
#                 -q || true
#               cd ../..
#             fi
#           done

#       # Container security scanning (for Dockerfile analysis)
#       - name: Dockerfile Security Scan
#         run: |
#           # Install Hadolint for Dockerfile linting
#           wget -q https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
#           chmod +x hadolint-Linux-x86_64

#           # Scan Dockerfiles
#           mkdir -p security-reports/dockerfile-scan
#           for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
#             if [ -f "services/$service/Dockerfile" ]; then
#               echo "Scanning Dockerfile for $service..."
#               ./hadolint-Linux-x86_64 "services/$service/Dockerfile" \
#                 --format json > "security-reports/dockerfile-scan/$service-hadolint.json" || echo "Dockerfile issues found in $service"
#             fi
#           done

#       # Trivy vulnerability scanner
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           scan-type: "fs"
#           scan-ref: "."
#           format: "sarif"
#           output: "security-reports/trivy-results.sarif"
#           severity: "CRITICAL,HIGH,MEDIUM"
#         continue-on-error: true

#       # Upload security scan results
#       - name: Upload Security Reports
#         uses: actions/upload-artifact@v4
#         with:
#           name: security-reports
#           path: security-reports/
#           retention-days: 30
#         if: always()

#       # Security summary
#       - name: Security Summary
#         run: |
#           echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
#           echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
#           echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

#           # Check if critical issues were found
#           if [ -f "security-reports/trivy-results.sarif" ]; then
#             critical_count=$(cat security-reports/trivy-results.sarif | jq -r '.runs[0].results | length // 0')
#             echo "| Trivy Scan | $critical_count issues found |" >> $GITHUB_STEP_SUMMARY
#           fi

#           if [ -f "security-reports/secrets-scan.json" ]; then
#             secret_count=$(cat security-reports/secrets-scan.json | wc -l)
#             echo "| Secret Scan | $secret_count potential secrets |" >> $GITHUB_STEP_SUMMARY
#           fi

#           echo "| OWASP Dependency Check | Completed |" >> $GITHUB_STEP_SUMMARY
#           echo "| CodeQL Analysis | Completed |" >> $GITHUB_STEP_SUMMARY
#           echo "| License Check | Completed |" >> $GITHUB_STEP_SUMMARY

#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "ðŸ“‹ **Next Steps:**" >> $GITHUB_STEP_SUMMARY
#           echo "1. Review security reports in the artifacts" >> $GITHUB_STEP_SUMMARY
#           echo "2. Address any critical or high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
#           echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY

  # Backend build (now depends on security checks for main branch)
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    strategy:
      fail-fast: false
      matrix:
        service:
          [
            api-gateway,
            user-service,
            group-service transaction-service,
            notification-service,
            mfa-service,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

    #   - name: Run strict linting for service
    #     run: |
    #       cd services/${{ matrix.service }}
    #       mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check -Pstrict-linting

      - name: Cache Maven dependencies (per service)
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            services/${{ matrix.service }}/target
          key: ${{ runner.os }}-maven-${{ matrix.service }}-${{ hashFiles('services/${{ matrix.service }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ matrix.service }}-
            ${{ runner.os }}-maven-

      # Start services
      - name: Start test services
        run: |
          # Start services in parallel and don't wait for full startup
          docker run -d --name postgres-test \
            -e POSTGRES_DB=stockfellow_test \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            -p 5432:5432 \
            postgres:15-alpine

          docker run -d --name mongo-test \
            -e MONGO_INITDB_ROOT_USERNAME=test \
            -e MONGO_INITDB_ROOT_PASSWORD=test \
            -p 27017:27017 \
            mongo:6-jammy

          docker run -d --name redis-test \
            -p 6379:6379 \
            redis:7-alpine
        continue-on-error: true

      # Compilation and testing
      - name: Compile and test ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}

          # Wait for services to be ready (with timeout)
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker exec postgres-test pg_isready -U test > /dev/null 2>&1; then
              break
            fi
            sleep 1
            ((timeout--))
          done

          # Run tests with parallel execution and reduced logging
          mvn ${{ env.MAVEN_CLI_OPTS }} clean test jacoco:report \
            -Dspring.profiles.active=test \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/stockfellow_test \
            -Dspring.datasource.username=test \
            -Dspring.datasource.password=test \
            -Dmongodb.uri=mongodb://test:test@localhost:27017/test_db?authSource=admin \
            -Dredis.host=localhost \
            -Dredis.port=6379 \
            -Dmaven.test.failure.ignore=false \
            -T 1C \
            -q
        timeout-minutes: 3

      - name: Upload coverage (async)
        uses: codecov/codecov-action@v4
        with:
          file: services/${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          fail_ci_if_error: false
        continue-on-error: true

      # Build
      - name: Build and package ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}
          # Skip tests since we already ran them, use parallel compilation
          mvn ${{ env.MAVEN_CLI_OPTS }} package -DskipTests -T 1C -q

      # Build Docker images (main branch only)
      - name: Build Docker image
        run: |
          cd services/${{ matrix.service }}
          # Use BuildKit for faster builds
          DOCKER_BUILDKIT=1 docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t stockfellow-${{ matrix.service }}:${{ github.sha }} \
            -t stockfellow-${{ matrix.service }}:latest \
            .

      # Container security scanning for built images
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "stockfellow-${{ matrix.service }}:${{ github.sha }}"
          format: "sarif"
          output: "${{ matrix.service }}-image-scan.sarif"
          severity: "CRITICAL,HIGH"
        continue-on-error: true

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-container-scan
          path: ${{ matrix.service }}-image-scan.sarif
          retention-days: 30
        if: always()

      - name: Export Docker image
        run: |
          # Compress while saving for faster upload
          docker save stockfellow-${{ matrix.service }}:${{ github.sha }} | gzip -1 > ${{ matrix.service }}-image.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-artifact
          path: |
            services/${{ matrix.service }}/target/*.jar
            ${{ matrix.service }}-image.tar.gz
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker stop postgres-test mongo-test redis-test || true
          docker rm postgres-test mongo-test redis-test || true

  # Package
  package:
    name: Package & Release
    runs-on: ubuntu-latest
    needs: [backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create deployment package
        run: |
          # Package creation
          mkdir -p release-package

          # Copy artifacts efficiently
          for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
            if [ -d "./artifacts/${service}-artifact" ]; then
              mkdir -p "release-package/${service}"
              # Handle both possible artifact structures
              if [ -d "./artifacts/${service}-artifact/services" ]; then
                cp -r ./artifacts/${service}-artifact/services/${service}/target/* "release-package/${service}/" 2>/dev/null || true
                cp ./artifacts/${service}-artifact/${service}-image.tar.gz "release-package/${service}/" 2>/dev/null || true
              else
                cp -r ./artifacts/${service}-artifact/* "release-package/${service}/" 2>/dev/null || true
              fi
            fi
          done

          # Include security reports in release package
          if [ -d "./artifacts/security-reports" ]; then
            cp -r ./artifacts/security-reports release-package/security-reports/
          fi

          # Deployment info with security scan timestamp
          cat > release-package/deployment-info.json << EOF
          {
            "version": "${{ github.run_number }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "security_scanned": true,
            "security_scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          # Copy pre-created docker-compose and scripts
          cp .github/docker-compose.yml release-package/ || echo "Docker compose not found, creating basic one"

          # Create basic start script
          cat > release-package/start.sh << 'EOF'
          #!/bin/bash
          echo "Loading and starting Stockfellow..."
          for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
            [ -f "${service}/${service}-image.tar.gz" ] && docker load < "${service}/${service}-image.tar.gz"
          done
          echo "Images loaded. Use docker-compose -f docker-compose.prod.yml up -d to start services."
          EOF
          chmod +x release-package/start.sh

      - name: Create release archive
        run: |
          cd release-package
          tar -cf ../stockfellow-release-v${{ github.run_number }}.tar.gz --use-compress-program="gzip -1" .
          cd ..
          sha256sum stockfellow-release-v${{ github.run_number }}.tar.gz > stockfellow-release-v${{ github.run_number }}.tar.gz.sha256

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: stockfellow-release-v${{ github.run_number }}
          path: |
            stockfellow-release-v${{ github.run_number }}.tar.gz
            stockfellow-release-v${{ github.run_number }}.tar.gz.sha256
          retention-days: 30

    #   # GitHub release
    #   - name: Create GitHub Release
    #     uses: softprops/action-gh-release@v2
    #     with:
    #       tag_name: v${{ github.run_number }}
    #       name: Release v${{ github.run_number }}
    #       body: |
    #         **Stockfellow Release v${{ github.run_number }}**
    #         - Commit: ${{ github.sha }}
    #         - Services: API Gateway, User Service, Group Service, Transaction Service
    #         - Security Scanned: âœ…
    #       files: |
    #         stockfellow-release-v${{ github.run_number }}.tar.gz
    #         stockfellow-release-v${{ github.run_number }}.tar.gz.sha256
    #       draft: false
    #       prerelease: false
    #     continue-on-error: true
