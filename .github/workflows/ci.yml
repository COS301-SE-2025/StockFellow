name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx2048m -XX:+TieredCompilation -XX:TieredStopAtLevel=1'
  MAVEN_CLI_OPTS: '--batch-mode --errors --fail-at-end --show-version'

jobs:
  # Linting validation for PRs and main/dev branches
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run strict linting
        run: |
          # Enable strict linting for main and dev branches, PRs
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/dev" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Running strict linting with failure on violations"
            mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check -Pstrict-linting -T 2C
          else
            echo "Running standard linting"
            mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check -T 2C
          fi

  # For PRs - quick validation
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Compile and validate
        run: |
          # Only compile changed services for PRs
          mvn ${{ env.MAVEN_CLI_OPTS }} compile -DskipTests -T 2C
        working-directory: .

  # Backend build
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: [lint]
    
    strategy:
      fail-fast: false
      matrix:
        service: [api-gateway, user-service, group-service, transaction-service, notification-service, mfa-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Run strict linting for service
        run: |
          cd services/${{ matrix.service }}
          mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check -Pstrict-linting

      - name: Cache Maven dependencies (per service)
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            services/${{ matrix.service }}/target
          key: ${{ runner.os }}-maven-${{ matrix.service }}-${{ hashFiles('services/${{ matrix.service }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ matrix.service }}-
            ${{ runner.os }}-maven-

      - name: Start test services
        run: |
          # Start services in parallel and don't wait for full startup
          docker run -d --name postgres-test \
            -e POSTGRES_DB=stockfellow_test \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            -p 5432:5432 \
            postgres:15-alpine
          
          docker run -d --name mongo-test \
            -e MONGO_INITDB_ROOT_USERNAME=test \
            -e MONGO_INITDB_ROOT_PASSWORD=test \
            -p 27017:27017 \
            mongo:6-jammy
          
          docker run -d --name redis-test \
            -p 6379:6379 \
            redis:7-alpine
        continue-on-error: true

      # Compilation and testing
      - name: Compile and test ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}
          
          # Wait for services to be ready (with timeout)
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker exec postgres-test pg_isready -U test > /dev/null 2>&1; then
              break
            fi
            sleep 1
            ((timeout--))
          done
          
          # Run tests with parallel execution and reduced logging
          mvn ${{ env.MAVEN_CLI_OPTS }} clean test jacoco:report \
            -Dspring.profiles.active=test \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/stockfellow_test \
            -Dspring.datasource.username=test \
            -Dspring.datasource.password=test \
            -Dmongodb.uri=mongodb://test:test@localhost:27017/test_db?authSource=admin \
            -Dredis.host=localhost \
            -Dredis.port=6379 \
            -Dmaven.test.failure.ignore=false \
            -T 1C \
            -q
        timeout-minutes: 3

      - name: Upload coverage (async)
        uses: codecov/codecov-action@v4
        with:
          file: services/${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          fail_ci_if_error: false
        continue-on-error: true

      # Build 
      - name: Build and package ${{ matrix.service }}
        run: |
          cd services/${{ matrix.service }}
          # Skip tests since we already ran them, use parallel compilation
          mvn ${{ env.MAVEN_CLI_OPTS }} package -DskipTests -T 1C -q

      # Build Docker(main branch)
      - name: Build Docker image
        run: |
          cd services/${{ matrix.service }}
          # Use BuildKit for faster builds
          DOCKER_BUILDKIT=1 docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t stockfellow-${{ matrix.service }}:${{ github.sha }} \
            -t stockfellow-${{ matrix.service }}:latest \
            .

      - name: Export Docker image
        run: |
          # Compress while saving for faster upload
          docker save stockfellow-${{ matrix.service }}:${{ github.sha }} | gzip -1 > ${{ matrix.service }}-image.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-artifact
          path: |
            services/${{ matrix.service }}/target/*.jar
            ${{ matrix.service }}-image.tar.gz
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          docker stop postgres-test mongo-test redis-test || true
          docker rm postgres-test mongo-test redis-test || true

  # Packaging
  package:
    name: Package & Release
    runs-on: ubuntu-latest
    needs: [backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create deployment package
        run: |
          # Simplified package creation
          mkdir -p release-package
          
          # Copy artifacts efficiently
          for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
            if [ -d "./artifacts/${service}-artifact" ]; then
              mkdir -p "release-package/${service}"
              cp ./artifacts/${service}-artifact/* "release-package/${service}/"
            fi
          done
          
          # Create minimal deployment info
          cat > release-package/deployment-info.json << EOF
          {
            "version": "${{ github.run_number }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
          # Copy pre-created docker-compose and scripts
          cp .github/docker-compose.yml release-package/ || echo "Docker compose not found, creating basic one"
          
          # Create basic start script
          cat > release-package/start.sh << 'EOF'
          #!/bin/bash
          echo "Loading and starting Stockfellow..."
          for service in api-gateway user-service group-service transaction-service notification-service mfa-service; do
            [ -f "${service}/${service}-image.tar.gz" ] && docker load < "${service}/${service}-image.tar.gz"
          done
          echo "Images loaded. Use docker-compose -f docker-compose.prod.yml up -d to start services."
          EOF
          chmod +x release-package/start.sh

      - name: Create release archive
        run: |
          cd release-package
          # Use faster compression
          tar -cf ../stockfellow-release-v${{ github.run_number }}.tar.gz --use-compress-program="gzip -1" .
          cd ..
          sha256sum stockfellow-release-v${{ github.run_number }}.tar.gz > stockfellow-release-v${{ github.run_number }}.tar.gz.sha256

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: stockfellow-release-v${{ github.run_number }}
          path: |
            stockfellow-release-v${{ github.run_number }}.tar.gz
            stockfellow-release-v${{ github.run_number }}.tar.gz.sha256
          retention-days: 30

    #   # GitHub release
    #   - name: Create GitHub Release
    #     uses: softprops/action-gh-release@v2
    #     with:
    #       tag_name: v${{ github.run_number }}
    #       name: Release v${{ github.run_number }}
    #       body: |
    #         **Stockfellow Release v${{ github.run_number }}**
    #         - Commit: ${{ github.sha }}
    #         - Services: API Gateway, User Service, Group Service, Transaction Service
    #       files: |
    #         stockfellow-release-v${{ github.run_number }}.tar.gz
    #         stockfellow-release-v${{ github.run_number }}.tar.gz.sha256
    #       draft: false
    #       prerelease: false
    #     continue-on-error: true