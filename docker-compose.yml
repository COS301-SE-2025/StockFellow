services:
  # PostgreSQL Database for Keycloak
  postgres:
    image: postgres:15
    container_name: keycloak-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - stockfellow-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Keycloak 
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_SPI_EVENTS_LISTENER_USER_SYNC_EVENT_LISTENER_USER_SERVICE_URL: http://user-service:4000
    ports:
      - "8080:8080"
    networks:
      - stockfellow-net
    volumes:
      - ./services/api-gateway/realm-exports:/opt/keycloak/data/import
      - ./keycloak-extensions/:/opt/keycloak/providers/
    command: start-dev --import-realm

  # api-gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    depends_on:
      - keycloak
    ports:
      - "3000:3000"
      - "9229:9229"  # For debugging
    environment:
      - NODE_ENV=development
      - KEYCLOAK_REALM_URL=http://keycloak:8080/realms/stokvel-realm
    networks:
      - stockfellow-net
    volumes:
      - ./services/api-gateway/src:/usr/src/app/src
      - /usr/src/app/node_modules
    command: npx nodemon --inspect=0.0.0.0:9229 src/server.js

  # user-service (Spring Boot)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev  # Use development Dockerfile
    container_name: user-service
    depends_on:
      - keycloak
    ports:
      - "4000:4000"
      - "5005:5005"  # Debug port for Java
    environment:
      - SPRING_PROFILES_ACTIVE=development
      - SPRING_DATA_MONGODB_URI=mongodb+srv://devoppscapstone:TPXLQ2laAnNrqQA3@cluster0.mhunonh.mongodb.net/stokvel_db?retryWrites=true&w=majority&appName=Cluster0
      - KEYCLOAK_JWKS_URI=http://keycloak:8080/realms/stockfellow/protocol/openid-connect/certs
    networks:
      - stockfellow-net
    volumes:
      - ./services/user-service/src:/app/src  # For development hot reload
      - ./services/user-service/pom.xml:/app/pom.xml
  
  # group-service (Spring Boot)
  group-service:
    build:
      context: ./services/group-service
      dockerfile: Dockerfile
    container_name: group-service
    depends_on:
      - keycloak
      - user-service
    ports:
      - "4040:4040"
      - "5006:5006"  # Debug port for Java
    environment:
      - SERVER_PORT=4040
      - SPRING_PROFILES_ACTIVE=docker
      - MONGODB_URI=mongodb+srv://devoppscapstone:TPXLQ2laAnNrqQA3@cluster0.mhunonh.mongodb.net/groups_stokvel_db?retryWrites=true&w=majority&appName=Cluster0
      - KEYCLOAK_ISSUER=http://keycloak:8080/realms/stockfellow
      - KEYCLOAK_JWKS_URI=http://keycloak:8080/realms/stockfellow/protocol/openid-connect/certs
      - USER_SERVICE_URL=http://user-service:4000
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
    networks:
      - stockfellow-net
    volumes:
      - ./services/group-service/src:/app/src  # For development hot reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4040/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
  # Mock Payment Service
  mock-payment-service:
    build: 
      context: ./mocks/payment-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/system/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

networks:
  stockfellow-net:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data: